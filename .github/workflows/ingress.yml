name: ingress
run-name: ingress

on: push

jobs:
  minikube-helm:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "myapp"
      K8S_NAMESPACE: "default"

    steps:
      - name: Set up Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/
          minikube start --driver=docker
        shell: bash

      - name: Set up kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
        shell: bash

      # - name: Create sample ingress
      #   run: |
      #     cat <<EOF | kubectl apply -f -
      #     apiVersion: networking.k8s.io/v1
      #     kind: Ingress
      #     metadata:
      #       name: ${APP_NAME}-ui-alb
      #       namespace: ${K8S_NAMESPACE}
      #       labels:
      #         release: ${APP_NAME}
      #       annotations:
      #         nginx.ingress.kubernetes.io/rewrite-target: /
      #       finalizers:
      #       - kubernetes
      #     spec:
      #       rules:
      #       - host: example.com
      #         http:
      #           paths:
      #           - path: /
      #             pathType: Prefix
      #             backend:
      #               service:
      #                 name: ${APP_NAME}
      #                 port:
      #                   number: 80
      #     EOF
      #   shell: bash

        # if kubectl get ing ${APP_NAME}-gateway-alb -n ${K8S_NAMESPACE}; then
        #   echo "gateway_ingress_exists=true" >> $GITHUB_ENV
        # else
        #   echo "gateway_ingress_exists=false" >> $GITHUB_ENV
        # fi

      # - name: Check release status
      #   id: check_release_status
      #   run: |
      #     if helm status ${APP_NAME} --namespace ${K8S_NAMESPACE}; then
      #       echo "Release exists"
      #       echo "release_exists=true" >> $GITHUB_ENV
      #     else
      #       echo "Release does not exist"
      #       echo "release_exists=false" >> $GITHUB_ENV
      #     fi
      #   shell: bash
      #   continue-on-error: true

      # - name: Check if ingress exists
      #   id: check_ingress
      #   run: |
      #     if kubectl get ing ${APP_NAME}-ui-alb -n ${K8S_NAMESPACE}; then
      #       echo "ui_ingress_exists=true" >> $GITHUB_ENV
      #       echo "ui ingress exists"
      #     else
      #       echo "ui_ingress_exists=false" >> $GITHUB_ENV
      #       echo "ui ingress not exists"
      #     fi
      #   shell: bash
      #   continue-on-error: true
      # - name: Set ui ingress status output
      #   id: set_ui_ingress_status
      #   run: echo "ui_ingress_exists=${{ env.ui_ingress_exists }}" >> $GITHUB_ENV
      #   shell: bash

      # - name: Set gateway ingress status output
      #   id: set_gateway_ingress_status
      #   run: echo "gateway_ingress_exists=${{ env.gateway_ingress_exists }}" >> $GITHUB_ENV
      #   shell: bash

      # - name: Before Patch and delete ingress for UI and Gateway
      #   run: |
      #     kubectl get ing -l release=${APP_NAME} --namespace ${K8S_NAMESPACE}
      #     kubectl get ing -l release=${APP_NAME} --namespace ${K8S_NAMESPACE} -o yaml > ui_ingress.yaml
      #     cat ui_ingress.yaml
      #   shell: bash
        # if: env.ui_ingress_exists == 'true'
      - name: After Patch and delete ingress for UI and Gateway
        run: |
          kubectl patch ing ${APP_NAME}-ui-alb -n ${K8S_NAMESPACE} --type='merge' -p '{"metadata": {"finalizers": []}}'
          kubectl get ing -l release=${APP_NAME} --namespace ${K8S_NAMESPACE}
          kubectl get ing -l release=${APP_NAME} --namespace ${K8S_NAMESPACE} -o yaml > ui_ingress.yaml
          cat ui_ingress.yaml
        shell: bash
        continue-on-error: true
          # || steps.set_gateway_ingress_status.outputs.gateway_ingress_exists == 'true'

